Task8*

create database task8;

use task8;

-- Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(120) UNIQUE
);

-- Products table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(120) NOT NULL,
    price DECIMAL(10,2) NOT NULL
);

-- Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total DECIMAL(10,2),
    status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Order items table
CREATE TABLE OrderItems (
    orderitem_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    qty INT,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Insert customers
INSERT INTO Customers VALUES
(1, 'Vijay', 'vijay@example.com'),
(2, 'Arjun', 'arjun@example.com'),
(3, 'Meena', 'meena@example.com');

-- Insert products
INSERT INTO Products VALUES
(1, 'T-shirt', 299.00),
(2, 'Cap', 129.00),
(3, 'Mug', 199.00);

-- Insert orders
INSERT INTO Orders VALUES
(1, 1, '2025-08-01', 428.00, 'delivered'),
(2, 1, '2025-08-07', 129.00, 'processing'),
(3, 2, '2025-08-09', 199.00, 'delivered');

-- Insert order items
INSERT INTO OrderItems VALUES
(1, 1, 1, 1), 
(2, 1, 2, 1), 
(3, 2, 2, 1), 
(4, 3, 3, 1); 


DELIMITER $$

CREATE PROCEDURE GetOrdersByCustomer(IN p_customer_id INT)
BEGIN
    SELECT o.order_id, o.order_date, o.status, o.total
    FROM Orders o
    WHERE o.customer_id = p_customer_id
    ORDER BY o.order_date;
END $$

DELIMITER ;

CALL GetOrdersByCustomer(1);


DELIMITER $$

CREATE FUNCTION TotalSpentByCustomer(p_customer_id INT)
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    DECLARE total_spent DECIMAL(10,2);

    SELECT COALESCE(SUM(total), 0)
    INTO total_spent
    FROM Orders
    WHERE customer_id = p_customer_id;

    RETURN total_spent;
END $$

DELIMITER ;

SELECT name, TotalSpentByCustomer(customer_id) AS total_spent
FROM Customers;

DELIMITER $$

CREATE PROCEDURE UpdateOrderStatus(
    IN p_order_id INT,
    IN p_new_status VARCHAR(20),
    OUT p_message VARCHAR(100)
)
BEGIN
    DECLARE old_status VARCHAR(20);

    SELECT status INTO old_status
    FROM Orders
    WHERE order_id = p_order_id;

    IF old_status IS NULL THEN
        SET p_message = 'Order not found';
    ELSEIF old_status = p_new_status THEN
        SET p_message = CONCAT('Order already in status: ', old_status);
    ELSE
        UPDATE Orders
        SET status = p_new_status
        WHERE order_id = p_order_id;
        SET p_message = CONCAT('Order status updated from ', old_status, ' to ', p_new_status);
    END IF;
END $$

DELIMITER ;

SET @msg = '';
CALL UpdateOrderStatus(2, 'delivered', @msg);
SELECT @msg AS result_message;
